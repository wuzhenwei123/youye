<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	                            http://www.springframework.org/schema/context 
	                            http://www.springframework.org/schema/context/spring-context-3.0.xsd
								http://www.springframework.org/schema/tx 
								http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
								http://www.springframework.org/schema/aop 
								http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
								http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
								">

	<context:annotation-config />

	<context:component-scan base-package="com.**.controller.**" />
	<context:component-scan base-package="com.**.service.**" />
	<context:component-scan base-package="com.**.dao.**" />
	<context:component-scan base-package="com.base.admin.**" />

	<!-- 定时任务扫描 -->
 	<context:component-scan base-package="com.yy.task" /> 
 	<task:scheduled-tasks>    
     	<task:scheduled ref="taskJob" method="updateCompanyState" cron="0 0 1 * * ?"/>  <!-- 每天凌晨一点 -->
	</task:scheduled-tasks>   

	<bean id="config"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:/com/conf/db_mysql.properties</value>
		</property>
	</bean>

	<!-- DBCP DataSource数据源 -->
	<bean id="dataSourceMaster" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close" init-method="init">
		<property name="driverClassName">
	        <value>${master.driverClassName}</value>
	    </property>
		<property name="url">
			<value>${master.url}</value>
		</property>     
        <property name="username">
        	<value>${master.username}</value>
        </property>  
        <property name="password">
        	<value>${master.password}</value>
        </property>             
        <!-- 配置初始化大小、最小、最大 -->  
        <property name="initialSize">
        	<value>${connect.initialPoolSize}</value>
        </property>  
        <property name="minIdle">
        	<value>${connect.minPoolSize}</value>
        </property>
        <property name="maxActive">
        	<value>${connect.maxPoolSize}</value>
        </property>  
        <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
	   
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	   
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	   
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	   
	    <!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" />  
	</bean>
	<bean id="dataSourceSlave" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close" init-method="init">
		<property name="driverClassName">
	        <value>${slave.driverClassName}</value>
	    </property>
		<property name="url">
			<value>${slave.url}</value>
		</property>   
        <property name="username">
        	<value>${slave.username}</value>
        </property>  
        <property name="password">
        	<value>${slave.password}</value>
        </property>             
        <!-- 配置初始化大小、最小、最大 -->  
        <property name="initialSize">
        	<value>${connect.initialPoolSize}</value>
        </property>  
        <property name="minIdle">
        	<value>${connect.minPoolSize}</value>
        </property>
        <property name="maxActive">
        	<value>${connect.maxPoolSize}</value>
        </property>  
        <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
	   
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	   
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	   
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	   
	    <!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" />  
	</bean>

	<bean id="sqlMapMaster" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation">
			<value>/WEB-INF/sqlMap-config.xml</value>
		</property>
		<property name="dataSource" ref="dataSourceMaster" />
	</bean>
	<bean id="sqlMapSlave" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation">
			<value>/WEB-INF/sqlMap-config.xml</value>
		</property>
		<property name="dataSource" ref="dataSourceSlave" />
	</bean>
	
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">  
<!--         对被认为是攻击的SQL进行LOG.error输出   -->
        <property name="logViolation"  value="true"/>  
<!--         对被认为是攻击的SQL抛出SQLExcepton   -->
        <property name="throwException" value="false" />  
    </bean>  
    
    <!--配置阿里云连接池状态监控-->  
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">  
<!--         监控sql执行大于1s的sql   -->
        <property name="slowSqlMillis" value="1000" />  
        <property name="logSlowSql" value="true" />  
        <property name="mergeSql" value="true" />  
    </bean>

	<!-- 操作数据库的基类 -->
	<bean id="baseDaoImpl" class="com.base.dao.IbatisBaseDaoImpl">
		<property name="ibatisDaoReader">
			<bean id="ibatisDaoReader" class="com.base.dao.common.IbatisDaoReaderImpl"></bean>
		</property>
		<property name="ibatisDaoWriter">
			<bean id="ibatisDaoWriter" class="com.base.dao.common.IbatisDaoWriterImpl" />
		</property>
	</bean>
	
<!-- 	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientTemplate"> -->
<!-- 		<property name="sqlMapClient" ref="sqlMapMaster" /> -->
<!-- 	</bean> -->

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceMaster"></property>
	</bean>
	
<!-- 	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/> -->

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<aop:config expose-proxy="true">
		<aop:pointcut id="txPointcut" expression="execution(* com.*.*.service.*Service.*(..))"/>  
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>

</beans>